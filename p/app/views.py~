from flask import render_template, flash, redirect, session, url_for, request, g
from flask.ext.login import login_user, logout_user, current_user, login_required
from app import app, db, lm, oid
from .forms import LoginForm
from forms import SearchForm, RegistrationForm
from .models import User, Products
from config import MAX_SEARCH_RESULTS


@lm.user_loader
def load_user(id):
	return User.query.get(int(id))

@app.before_request
def before_request():
    g.user = current_user

@app.route('/')
@app.route('/index')
# @login_required
def index():
    user = {'username': 'Miguel'}  # fake user
    posts = [  # fake array of posts
        { 
            'author': {'nickname': 'John'}, 
            'body': 'Beautiful day in Portland!' 
        },
        { 
            'author': {'nickname': 'Susan'}, 
            'body': 'The Avengers movie was so cool!' 
        }
    ]
    return render_template("index.html",
                           title='Home',
                           user=user,
                           posts=posts)
                           
@app.route('/aboutus')
def aboutus():
	return render_template("aboutus.html")                           
   

# @app.route('/login', methods=['GET', 'POST'])
# 
# @oid.loginhandler
# def login():
# 	if g.user is not None and g.user.is_authenticated():
#  		return redirect(url_for('index'))
#  	form = LoginForm()
#  	if form.validate_on_submit():
#  		session['remember_me'] = form.remember_me.data
#  		return oid.try_login(form.openid.data, ask_for=['nickname', 'email'])
#  	return render_template('login.html', title='Sign In',form=form, providers=app.config['OPENID_PROVIDERS'])
#  
#     
# def login():
# error = None
# 	if g.user is not None and g.user.is_authenticated():
#  		return redirect(url_for('index'))
#  	form = LoginForm()
#  	if request.form['username'] != 'admin' or request.form['password'] != 'admin':
#  		error = 'Invalid credentials. Please try again.'

 # if form.validate_on_submit():
#  		session['remember_me'] = form.remember_me.data
#  		return oid.try_login(form.openid.data, ask_for=['nickname', 'email'])
#  	return render_template('login.html', title='Sign In',form=form, providers=app.config['OPENID_PROVIDERS'])
 
    


@oid.after_login
def after_login(resp):
    if resp.email is None or resp.email == "":
        flash('Invalid login. Please try again.')
        return redirect(url_for('login'))
    user = User.query.filter_by(email=resp.email).first()
    if user is None:
        nickname = resp.nickname
        if nickname is None or nickname == "":
            nickname = resp.email.split('@')[0]
        user = User(nickname=nickname, email=resp.email)
        db.session.add(user)
        db.session.commit()
    remember_me = False
    if 'remember_me' in session:
        remember_me = session['remember_me']
        session.pop('remember_me', None)
    login_user(user, remember = remember_me)
    return redirect(request.args.get('next') or url_for('index'))
    
@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.before_request
def before_request():
    g.user = current_user
    g.search_form = SearchForm()
    g.form = RegistrationForm()
    # if g.user.is_authenticated():
#         g.user.last_seen = datetime.utcnow()
#         db.session.add(g.user)
#         db.session.commit()
#         g.search_form = SearchForm()

@app.route('/search', methods=['POST'])
# @login_required
def search():
    if not g.search_form.validate_on_submit():
        return redirect(url_for('index'))
    return redirect(url_for('search_results', query=g.search_form.search.data))

@app.route('/search_results/<query>')
# @login_required
def search_results(query):
    p_results = Products.query.whoosh_search(query, MAX_SEARCH_RESULTS).all()

    u_results = User.query.whoosh_search(query, MAX_SEARCH_RESULTS).all()
    return render_template('search_results.html',
                           query=query,
                           presults=p_results, uresults=u_results)

@app.route('/user/<nickname>')
@login_required
def user(nickname):
    user = User.query.filter_by(nickname=nickname).first()
    if user == None:
        flash('User %s not found.' % nickname)
        return redirect(url_for('index'))
    posts = [
        {'author': user, 'body': 'Test post #1'},
        {'author': user, 'body': 'Test post #2'}
    ]
    return render_template('user.html',
                           user=user,
                           posts=posts)


@app.route('/register', methods=['GET', 'POST'])
def register():

	if request.method == 'POST' and g.form.validate_on_submit() != False:
		user = User(username=g.form.username.data, email=g.form.email.data, password=g.form.password.data)
		print 'done'
		db.session.add(user)
		db.session.commit()
		flash('Thanks for registering')
		return redirect(url_for('index'))
	elif request.method == 'POST' and g.form.validate_on_submit() == False:
		return render_template('index.html', reg_errors=g.form.errors)
	print 'startup fail'
	return render_template('index.html')

    
@app.route('/login',methods=['GET','POST'])
def login():
    if request.method == 'GET':
        return render_template('login.html')
    return redirect(url_for('index'))
    
@app.route('/checkout')
def checkout():
	return render_template("checkout.php")    